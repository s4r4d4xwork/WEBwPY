from flask import Flask,render_template, request, session, redirect, url_for, flash, send_from_directory
from flask_mysqldb import MySQL
import MySQLdb.cursors
from werkzeug.utils import secure_filename
import os

app = Flask(__name__)

app.config['SECRET_KEY'] = 'admin'
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = ''
app.config['MYSQL_DB'] = 'webdb'
app.config['UPLOAD_FOLDER'] = 'D:\CODE\FIS\html5\FILES'
app.config

mysql = MySQL(app)

@app.route('/uploads/<name>')
def download_file(name):
    return send_from_directory(app.config["UPLOAD_FOLDER"], name)

@app.route('/upload')
def upload_file():
   return render_template('upload.html')
  
@app.route('/uploader', methods = ['GET', 'POST'])
def uploader_file():
   if request.method == 'POST':
      f = request.files['file']
      file = secure_filename(f.filename)
      f.save(os.path.join(app.config['UPLOAD_FOLDER'], file))
      return 'file uploaded successfully'

@app.route('/', methods=['GET','POST'])
def home():
    return render_template('home.html',mess='HOME')

@app.route('/register', methods=['GET','POST'])
def register():
    if request.method == 'POST':
        email = request.form.get('email').strip()
        username = request.form.get('username').strip()
        age = request.form.get('age').strip()
        password = request.form.get('password').strip()
        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
        cursor.execute(''' ALTER TABLE User AUTO_INCREMENT = 1 ''')
        mysql.connection.commit()
        try:
            cursor.execute(f''' INSERT INTO User (UserName, Email, Age, Passwd) 
                        VALUES ('{username}', '{email}', {age}, '{password}') ''')
            mysql.connection.commit()
            cursor.close()
            return redirect(url_for('login'))
        except Exception as e:
            flash(e, category='error')
            return render_template('register.html')
   
    return render_template('register.html')




#monolist 
#micro service
@app.route('/login', methods=['GET','POST'])
def login():
    if request.method == 'POST':
        email = request.form.get('email').strip()
        password = request.form.get('password').strip()
        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
        cursor.execute(f''' SELECT * FROM User WHERE Email = '{email}' AND Passwd = '{password}' ''')
        user = cursor.fetchone()
        if user:
            session['loggedin'] = True
            session['UserID'] = user['UserID']
            session['UserName'] = user['UserName']
            flash('Login Successfull!', category='success')
            return redirect(url_for('profile'))
        else:
            flash('Login Failed!', category='error')

    return render_template('login.html')

@app.route('/logout')
def logout():
    # Remove session data, this will log the user out
   session.pop('loggedin', None)
   session.pop('UserID', None)
   session.pop('UserName', None)
   # Redirect to login page
   return redirect(url_for('home'))

@app.route('/profile')
def profile():
    # Check if user is loggedin
    if 'loggedin' in session:
        # We need all the account info for the user so we can display it on the profile page
        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
        cursor.execute(f''' SELECT * FROM User WHERE UserID = '{session['UserID']}' ''')
        account = cursor.fetchone()
        print(account)
        # Show the profile page with account info
        return render_template('profile.html', account=account, user_login = True)
    # User is not loggedin redirect to login page
    return redirect(url_for('login'))

@app.route('/find-age', methods=['GET','POST'])
def find_age():
    if request.method == 'POST':
        age = request.form.get('age').strip()
        cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
        try:
            cursor.execute(f''' SELECT * FROM User WHERE Age = {age} ''')
            accounts = cursor.fetchall()
            if accounts:
                flash('User(s) existed!', category='success')
            else:
                flash('User(s) not existed!', category='error')
            return render_template('find_age.html', accounts=accounts, age_found = age, user_login = True)
        except Exception as e:
            flash(e, category='error')
            return render_template('find_age.html', accounts=None, age_found = None, user_login = True)
    return render_template('find_age.html', accounts=None, age_found = None, user_login = True)

@app.route("/login/test", methods=['GET','POST'])
def login2nd():
    msg = request.args.get('msg')
    return render_template('login2nd.html', msg = msg)

@app.route('/create')
def insert():
    cursor = mysql.connection.cursor(MySQLdb.cursors.DictCursor)
    cursor.execute(''' CREATE TABLE IF NOT EXISTS User(
        UserID int NOT NULL AUTO_INCREMENT,
        UserName varchar(50) NOT NULL,
        Email varchar(100) NOT NULL,
        Age int NOT NULL,
        Passwd nvarchar(255) NOT NULL,
        PRIMARY KEY (UserID),
        UNIQUE (Email)
        )''')
    mysql.connection.commit()
    cursor.execute(''' ALTER TABLE User AUTO_INCREMENT = 1 ''')
    mysql.connection.commit()
    cursor.execute(''' SELECT Email, Passwd FROM User WHERE UserID = 1 ''') # 1 if exists and 0 otherwise
    check_user = cursor.fetchone() #return 1 (next 1) result - must have db first
    print(str(check_user))
    if check_user == None:
        cursor.execute(''' INSERT INTO User (UserName, Email, Age, Passwd) 
                        VALUES ('Admin', 'admin@admin', 69, '6996') ''')
    mysql.connection.commit()
    cursor.close()
    return render_template('home.html', mess='Table Created!')

app.run(host='localhost', port=6996, debug=True)